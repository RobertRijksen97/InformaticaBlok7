import java.util.HashSet;
import java.util.regex.*;
// er is een global int counter nodig om de count bij te houden
// er is een string minORFLength nodig om de minimale orf length aan te geven
// reverseString wordt gebruikt om voor findReverseORFs de string om te draaien
// findReverseORFs gebruikt als input eht resultaat van reverseString
// findReverseORFs en findORFs verwachten eerst de sequentie ,en daarna een strign met de minimale ORF lengte
// HashSet<OrfResultaat> is waar de orfs in worden opgeslagen
// er wordt in de regular expressions geen rekening gehouden met codons omdat het readign frame kan verschuiiven door intronen
// imports:
//import java.util.HashSet;
//import java.util.regex.*;

public class FindORF {
    private static String seqGiven = "AUGGCAUAAUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACUAUGGCAUUGATGACCAUCAGUACGUGUACCGUAAUGGUAGCAUGCUACGCUGCAAUGCAUGCAGUACGUACGUCAGUCAUGACUCACACACGUACGUACGUGUGUGUACACACGUGUCGUCGUACGUCAUGCAUACGUCAGUCAGUCGUACAUGGUACGUCGUACUGACGUCAGUCAGUACU"; // test string
    public static HashSet<OrfResultaat> results = new HashSet<OrfResultaat>(); // Create hashset for ORF objects
    public static int count = 0;                            // counter for ORF id

    public static void main(String[] args) {
        String reverse = reverseString(seqGiven);       // reverses sequence
        int sjaakie = 5%4;
        System.out.println("sjaakie: "+sjaakie);
        String minOrfLength = "5";                      // min orf length for testing purposes
        findORFs(seqGiven,  minOrfLength);              // finds forward ORFs
        findReverseORFs(reverse, minOrfLength);         // finds reverse ORFs

    }

    /** this function reverses the DNA sequence
     * @param seqGiven the DNA sequence
     * @return a string containing the reverse of the given DNA sequence
     */
    private static String reverseString(String seqGiven) {
        String str = "read.nextLine()";
        String reverse = "";

        for (int i = seqGiven.length() - 1; i >= 0; i--) {
            reverse = reverse + seqGiven.charAt(i);
        }
        System.out.println("reverse: " + reverse);
        return reverse;

    }

    /**
     * this function is meant to find forward readign frames
     * this function requires a global int named counter
     *
     * @param sequence     the given DNA sequence
     * @param minOrfLength String containing the min length of an orf
     */
    public static void findORFs(String sequence, String minOrfLength) {
        // String to be scanned to find the pattern.
        String string = "AUG(.{" + minOrfLength + ",}?)(UAA|UAG|UGA)";                           // gene signals

        // Create a Pattern object
        Pattern p = Pattern.compile(string);

        // get a matcher object
        Matcher m = p.matcher(sequence);

        while (m.find()) {
            count++;
            int readignframe = m.start()%3;                 // calculates the readign frame
            results.add(new OrfResultaat(m.start(), m.end()));                  // stores the start and stop positions
            System.out.println("ORFs found: " + count);
            System.out.println("Found at: " + m.start() + " - " + m.end());
            System.out.println("readignframe: "+readignframe);
        }
    }

    /**
     * this function is meant to find reverse readign frames
     * this function requires a global int named counter
     * @param sequence     the reverse of the given DNA sequence
     * @param minOrfLength String containing the min length of an orf
     */
    public static void findReverseORFs(String sequence, String minOrfLength) {
        int length = sequence.length();
        // String to be scanned to find the pattern.
        String string = "AUG(.{" + minOrfLength + ",}?)(UAA|UAG|UGA)";                           // gene signals

        // Create a Pattern object
        Pattern p = Pattern.compile(string);

        // get a matcher object
        Matcher m = p.matcher(sequence);

        while (m.find()) {
            count++;
            int readignframe = m.start()%3;                 // calculates the readign frame
            results.add(new OrfResultaat(length - m.start(), length - m.end()));                  // stores the start and stop positions
            System.out.println("ORFs found: " + count);
            System.out.println("Found at: " + (length - m.start()) + " - " + (length - m.end()));
            System.out.println("readignframe: "+readignframe);
        }
    }

}

